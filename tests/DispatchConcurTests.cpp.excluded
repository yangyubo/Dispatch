//------------------------------------------------------------------------------
// This source file is part of the Dispatch open source project
//
// Copyright (c) 2022 - 2022 Dispatch authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//------------------------------------------------------------------------------

// This test could not be passed, even if the code is correct.

#include "DispatchTests.h"
#include <stdatomic.h>
#include <CoreFoundation/CoreFoundation.h>

extern "C" {
    extern void dispatch_queue_set_width(dispatch_queue_t dq, long width);
};

#if defined(__unix__) || (defined(__APPLE__) && defined(__MACH__))
#include <unistd.h>
#ifdef __ANDROID__
#include <linux/sysctl.h>
#else
#if !defined(__linux__)
#include <sys/sysctl.h>
#endif
#endif /* __ANDROID__ */
#endif

static volatile size_t done, concur;
static int use_group_async;
static uint32_t activecpu;
static uint32_t min_acceptable_concurrency;

static DispatchQueue *q;
static DispatchGroup *g, *gw;


const size_t workers = 4;

static void (^work)(void) = ^{
    usleep(1000);
    __sync_add_and_fetch(&done, 1);

    if (!use_group_async) gw->leave();
};

static void submit_work(void* ctxt) {
    size_t c = __sync_add_and_fetch(&concur, 1), *m = (size_t *)ctxt, i;
    if (c > *m) *m = c;

    for (i = 0; i < workers; ++i) {
        if (use_group_async) {
            q->async(*gw, work);
        } else {
            gw->enter();
            q->async(work);
        }
    }

    usleep(10000);
    __sync_sub_and_fetch(&concur, 1);

    if (!use_group_async) g->leave();
}

static void test_concur_async(size_t n, size_t qw) {
    size_t i, max_concur = 0;
    auto *mcs = (size_t *)calloc(n, sizeof(size_t));
    size_t *mc;
    done = 0;
    concur = 0;

    q->suspend();

    for (i = 0, mc = mcs; i < n; i++, mc++) {
        if (use_group_async) {
            q->async(*g, ^{
                submit_work(mc);
            });
        } else {
            g->enter();
            q->async(^{
                submit_work(mc);
            });
        }
    }
    q->resume();
    g->wait();

    if (qw > 1) {
        size_t concurrency = MIN(n * workers, qw);
        if (done > min_acceptable_concurrency) {
            CHECK_MESSAGE(done <= concurrency, "concurrently completed workers");
        } else {
            CHECK_MESSAGE(done == concurrency, "concurrently completed workers");
        }
    } else {
        CHECK_MESSAGE(done <= 1, "concurrently completed workers");
    }

    for (i = 0, mc = mcs; i < n; i++, mc++) {
        if (*mc > max_concur) max_concur = *mc;
    }
    free(mcs);

    size_t expect = MIN(n, qw);
    if (max_concur > min_acceptable_concurrency) {
        CHECK_MESSAGE(max_concur <= expect, "max submission concurrency");
    } else {
        CHECK_MESSAGE(max_concur == expect, "max submission concurrency");
    }

    gw->wait();
    usleep(1000);
}

static void sync_work(void* ctxt) {
    size_t c = __sync_add_and_fetch(&concur, 1), *m = (size_t *)ctxt;
    if (c > *m) *m = c;

    usleep(10000);
    __sync_sub_and_fetch(&concur, 1);
}

static void test_concur_sync(size_t n, size_t qw) {
    size_t i, max_concur = 0;
    auto *mcs = (size_t *) calloc(n, sizeof(size_t));
    size_t *mc;
    concur = 0;

    for (i = 0, mc = mcs; i < n; i++, mc++) {
        DispatchQueue::global(DispatchQoS::QoSClass::USER_INITIATED).async(*g, ^{
            usleep(100000);
            q->sync(^{
                sync_work(mc);
            });
        });
    }

    g->wait();

    for (i = 0, mc = mcs; i < n; i++, mc++) {
        if (*mc > max_concur) max_concur = *mc;
    }
    free(mcs);

    size_t expect = qw == 1 ? 1 : n;
    if (max_concur > min_acceptable_concurrency) {
        CHECK_MESSAGE(max_concur <= expect, "max sync concurrency");
    } else {
        CHECK_MESSAGE(max_concur == expect, "max sync concurrency");
    }
}

static void apply_work(void* ctxt, size_t i) {
    size_t c = __sync_add_and_fetch(&concur, 1), *m = ((size_t *)ctxt) + i;
    if (c > *m) *m = c;

    usleep(100000);
    __sync_sub_and_fetch(&concur, 1);
}

static void test_concur_apply(size_t n, size_t qw) {
    size_t i, max_concur = 0;
    auto *mcs = (size_t *)calloc(n, sizeof(size_t));
    size_t *mc;
    concur = 0;

    q->apply(n, ^(size_t idx) {
        apply_work(mcs, idx);
    });

    for (i = 0, mc = mcs; i < n; i++, mc++) {
        if (*mc > max_concur) max_concur = *mc;
    }
    free(mcs);

    size_t expect = MIN(n, qw);
    if (max_concur > min_acceptable_concurrency) {
        CHECK_MESSAGE(max_concur <= expect, "max apply concurrency");
    } else {
        CHECK_MESSAGE(max_concur == expect, "max apply concurrency");
    }
}

static DispatchQueue* create_queue(long width, DispatchQueue* tq, long *qw, const char **ql) {
    if (!width) {
        *qw = LONG_MAX;
        *ql = "global";
        return new DispatchQueue(DispatchQueue::global());
    };

    DispatchQueue::Attributes qattr;

    *qw = width;
    *ql = width < LONG_MAX ? ( width == 1 ? "serial": "wide" ) : "concurrent";
#if DISPATCH_API_VERSION >= 20100518 // <rdar://problem/7790099>
    qattr = width < LONG_MAX ? DispatchQueue::Attributes::NONE : DispatchQueue::Attributes::CONCURRENT;
#endif
    auto queue = new DispatchQueue(std::string(*ql), qattr);
    if (qattr == DispatchQueue::Attributes::NONE) {
        // Internal function, NOT SUPPORTED:
         dispatch_queue_set_width(queue->_wrapped, width);
    }
    if (tq) {
        queue->setTarget(*tq);
    }
    if (qattr == DispatchQueue::Attributes::NONE || tq) {
        queue->sync(DispatchWorkItemFlags::BARRIER, ^{
            // wait for changes to take effect
        });
    }
    return queue;
}

TEST_SUITE("Dispatch Private Concurrent/Wide Queue") {
// <rdar://problem/8049506&8169448&8186485>

TEST_CASE("Concurrent Perform") {

#ifdef __linux__
    activecpu = (uint32_t)sysconf(_SC_NPROCESSORS_ONLN);
#else
    size_t s = sizeof(activecpu);
    sysctlbyname("hw.activecpu", &activecpu, &s, nullptr, 0);
#endif
    size_t n = activecpu / 2 > 1 ? activecpu / 2 : 1, w = activecpu * 2;
    min_acceptable_concurrency = (uint32_t)n;
    DispatchQueue *tq, *ttq;
    long qw, tqw, ttqw;
    const char *ql, *tql, *ttql;
    size_t qi, tqi, ttqi;
    long qws[] = {
        0, LONG_MAX, (long)w, 1, // 0 <=> global queue
    };

    g = new DispatchGroup {};
    gw = new DispatchGroup {};

    for (ttqi = 0; ttqi < sizeof(qws)/sizeof(*qws); ttqi++) {
        ttq = create_queue(qws[ttqi], nullptr, &ttqw, &ttql);
        for (tqi = 0; tqi < sizeof(qws)/sizeof(*qws); tqi++) {
            if (!qws[tqi] && qws[ttqi]) continue;
            tq = create_queue(qws[tqi], ttq, &tqw, &tql);
            for (qi = 0; qi < sizeof(qws)/sizeof(*qws); qi++) {
                if (!qws[qi] && qws[tqi]) continue;
                q = create_queue(qws[qi], tq, &qw, &ql);
                for (use_group_async = 0; use_group_async < 2; use_group_async++) {
                    fprintf(stdout, "Testing dispatch%s_async on "
                                    "queue hierarchy: %s -> %s -> %s\n",
                            use_group_async ? "_group" : "", ql, tql, ttql);
                    fflush(stdout);
                    test_concur_async(n, (size_t)MIN(qw, MIN(tqw, ttqw)));
                }
                fprintf(stdout, "Testing dispatch_sync on "
                                "queue hierarchy: %s -> %s -> %s\n", ql, tql, ttql);
                fflush(stdout);
                test_concur_sync(w, (size_t)MIN(qw, MIN(tqw, ttqw)));
                fprintf(stdout, "Testing dispatch_apply on "
                                "queue hierarchy: %s -> %s -> %s\n", ql, tql, ttql);
                fflush(stdout);
                test_concur_apply(activecpu, (size_t)MIN(qw, MIN(tqw, ttqw)));
                delete q;
            }
            delete tq;
        }
        delete ttq;
    }

    delete g;
    delete gw;
}

}


